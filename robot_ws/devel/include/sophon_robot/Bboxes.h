// Generated by gencpp from file sophon_robot/Bboxes.msg
// DO NOT EDIT!


#ifndef SOPHON_ROBOT_MESSAGE_BBOXES_H
#define SOPHON_ROBOT_MESSAGE_BBOXES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sophon_robot/Bbox.h>

namespace sophon_robot
{
template <class ContainerAllocator>
struct Bboxes_
{
  typedef Bboxes_<ContainerAllocator> Type;

  Bboxes_()
    : frame_id(0)
    , num_object(0)
    , bboxes()  {
    }
  Bboxes_(const ContainerAllocator& _alloc)
    : frame_id(0)
    , num_object(0)
    , bboxes(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _frame_id_type;
  _frame_id_type frame_id;

   typedef uint32_t _num_object_type;
  _num_object_type num_object;

   typedef std::vector< ::sophon_robot::Bbox_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::sophon_robot::Bbox_<ContainerAllocator> >> _bboxes_type;
  _bboxes_type bboxes;





  typedef boost::shared_ptr< ::sophon_robot::Bboxes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sophon_robot::Bboxes_<ContainerAllocator> const> ConstPtr;

}; // struct Bboxes_

typedef ::sophon_robot::Bboxes_<std::allocator<void> > Bboxes;

typedef boost::shared_ptr< ::sophon_robot::Bboxes > BboxesPtr;
typedef boost::shared_ptr< ::sophon_robot::Bboxes const> BboxesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sophon_robot::Bboxes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sophon_robot::Bboxes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sophon_robot::Bboxes_<ContainerAllocator1> & lhs, const ::sophon_robot::Bboxes_<ContainerAllocator2> & rhs)
{
  return lhs.frame_id == rhs.frame_id &&
    lhs.num_object == rhs.num_object &&
    lhs.bboxes == rhs.bboxes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sophon_robot::Bboxes_<ContainerAllocator1> & lhs, const ::sophon_robot::Bboxes_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sophon_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sophon_robot::Bboxes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sophon_robot::Bboxes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sophon_robot::Bboxes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sophon_robot::Bboxes_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sophon_robot::Bboxes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sophon_robot::Bboxes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sophon_robot::Bboxes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bce7b973189104571425eaff14883c6a";
  }

  static const char* value(const ::sophon_robot::Bboxes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbce7b97318910457ULL;
  static const uint64_t static_value2 = 0x1425eaff14883c6aULL;
};

template<class ContainerAllocator>
struct DataType< ::sophon_robot::Bboxes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sophon_robot/Bboxes";
  }

  static const char* value(const ::sophon_robot::Bboxes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sophon_robot::Bboxes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 frame_id\n"
"uint32 num_object\n"
"Bbox[] bboxes\n"
"\n"
"================================================================================\n"
"MSG: sophon_robot/Bbox\n"
"uint32 frame_id\n"
"uint32 object_id \n"
"int32  track_id\n"
"string object_name\n"
"float32  left_top_x\n"
"float32  left_top_y\n"
"float32  width\n"
"float32  height\n"
"float32  conf\n"
;
  }

  static const char* value(const ::sophon_robot::Bboxes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sophon_robot::Bboxes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.num_object);
      stream.next(m.bboxes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Bboxes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sophon_robot::Bboxes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sophon_robot::Bboxes_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frame_id);
    s << indent << "num_object: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_object);
    s << indent << "bboxes[]" << std::endl;
    for (size_t i = 0; i < v.bboxes.size(); ++i)
    {
      s << indent << "  bboxes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sophon_robot::Bbox_<ContainerAllocator> >::stream(s, indent + "    ", v.bboxes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOPHON_ROBOT_MESSAGE_BBOXES_H
