// Generated by gencpp from file sophon_robot/Bbox.msg
// DO NOT EDIT!


#ifndef SOPHON_ROBOT_MESSAGE_BBOX_H
#define SOPHON_ROBOT_MESSAGE_BBOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sophon_robot
{
template <class ContainerAllocator>
struct Bbox_
{
  typedef Bbox_<ContainerAllocator> Type;

  Bbox_()
    : frame_id(0)
    , object_id(0)
    , track_id(0)
    , object_name()
    , left_top_x(0.0)
    , left_top_y(0.0)
    , width(0.0)
    , height(0.0)
    , conf(0.0)  {
    }
  Bbox_(const ContainerAllocator& _alloc)
    : frame_id(0)
    , object_id(0)
    , track_id(0)
    , object_name(_alloc)
    , left_top_x(0.0)
    , left_top_y(0.0)
    , width(0.0)
    , height(0.0)
    , conf(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _frame_id_type;
  _frame_id_type frame_id;

   typedef uint32_t _object_id_type;
  _object_id_type object_id;

   typedef int32_t _track_id_type;
  _track_id_type track_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _object_name_type;
  _object_name_type object_name;

   typedef float _left_top_x_type;
  _left_top_x_type left_top_x;

   typedef float _left_top_y_type;
  _left_top_y_type left_top_y;

   typedef float _width_type;
  _width_type width;

   typedef float _height_type;
  _height_type height;

   typedef float _conf_type;
  _conf_type conf;





  typedef boost::shared_ptr< ::sophon_robot::Bbox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sophon_robot::Bbox_<ContainerAllocator> const> ConstPtr;

}; // struct Bbox_

typedef ::sophon_robot::Bbox_<std::allocator<void> > Bbox;

typedef boost::shared_ptr< ::sophon_robot::Bbox > BboxPtr;
typedef boost::shared_ptr< ::sophon_robot::Bbox const> BboxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sophon_robot::Bbox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sophon_robot::Bbox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sophon_robot::Bbox_<ContainerAllocator1> & lhs, const ::sophon_robot::Bbox_<ContainerAllocator2> & rhs)
{
  return lhs.frame_id == rhs.frame_id &&
    lhs.object_id == rhs.object_id &&
    lhs.track_id == rhs.track_id &&
    lhs.object_name == rhs.object_name &&
    lhs.left_top_x == rhs.left_top_x &&
    lhs.left_top_y == rhs.left_top_y &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.conf == rhs.conf;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sophon_robot::Bbox_<ContainerAllocator1> & lhs, const ::sophon_robot::Bbox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sophon_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sophon_robot::Bbox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sophon_robot::Bbox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sophon_robot::Bbox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sophon_robot::Bbox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sophon_robot::Bbox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sophon_robot::Bbox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sophon_robot::Bbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57b21a664452e94c7dc920b3df79aeaf";
  }

  static const char* value(const ::sophon_robot::Bbox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57b21a664452e94cULL;
  static const uint64_t static_value2 = 0x7dc920b3df79aeafULL;
};

template<class ContainerAllocator>
struct DataType< ::sophon_robot::Bbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sophon_robot/Bbox";
  }

  static const char* value(const ::sophon_robot::Bbox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sophon_robot::Bbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 frame_id\n"
"uint32 object_id \n"
"int32  track_id\n"
"string object_name\n"
"float32  left_top_x\n"
"float32  left_top_y\n"
"float32  width\n"
"float32  height\n"
"float32  conf\n"
;
  }

  static const char* value(const ::sophon_robot::Bbox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sophon_robot::Bbox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.object_id);
      stream.next(m.track_id);
      stream.next(m.object_name);
      stream.next(m.left_top_x);
      stream.next(m.left_top_y);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.conf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Bbox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sophon_robot::Bbox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sophon_robot::Bbox_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frame_id);
    s << indent << "object_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.object_id);
    s << indent << "track_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.track_id);
    s << indent << "object_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.object_name);
    s << indent << "left_top_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_top_x);
    s << indent << "left_top_y: ";
    Printer<float>::stream(s, indent + "  ", v.left_top_y);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "conf: ";
    Printer<float>::stream(s, indent + "  ", v.conf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOPHON_ROBOT_MESSAGE_BBOX_H
