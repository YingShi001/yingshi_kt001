// Generated by gencpp from file sophon_robot/Frame.msg
// DO NOT EDIT!


#ifndef SOPHON_ROBOT_MESSAGE_FRAME_H
#define SOPHON_ROBOT_MESSAGE_FRAME_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/CompressedImage.h>
#include <sophon_robot/Bboxes.h>

namespace sophon_robot
{
template <class ContainerAllocator>
struct Frame_
{
  typedef Frame_<ContainerAllocator> Type;

  Frame_()
    : frame_id(0)
    , img()
    , bboxes()  {
    }
  Frame_(const ContainerAllocator& _alloc)
    : frame_id(0)
    , img(_alloc)
    , bboxes(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _frame_id_type;
  _frame_id_type frame_id;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _img_type;
  _img_type img;

   typedef  ::sophon_robot::Bboxes_<ContainerAllocator>  _bboxes_type;
  _bboxes_type bboxes;





  typedef boost::shared_ptr< ::sophon_robot::Frame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sophon_robot::Frame_<ContainerAllocator> const> ConstPtr;

}; // struct Frame_

typedef ::sophon_robot::Frame_<std::allocator<void> > Frame;

typedef boost::shared_ptr< ::sophon_robot::Frame > FramePtr;
typedef boost::shared_ptr< ::sophon_robot::Frame const> FrameConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sophon_robot::Frame_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sophon_robot::Frame_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sophon_robot::Frame_<ContainerAllocator1> & lhs, const ::sophon_robot::Frame_<ContainerAllocator2> & rhs)
{
  return lhs.frame_id == rhs.frame_id &&
    lhs.img == rhs.img &&
    lhs.bboxes == rhs.bboxes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sophon_robot::Frame_<ContainerAllocator1> & lhs, const ::sophon_robot::Frame_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sophon_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sophon_robot::Frame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sophon_robot::Frame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sophon_robot::Frame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sophon_robot::Frame_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sophon_robot::Frame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sophon_robot::Frame_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sophon_robot::Frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c73f23c5150c19b07c35b376f304e421";
  }

  static const char* value(const ::sophon_robot::Frame_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc73f23c5150c19b0ULL;
  static const uint64_t static_value2 = 0x7c35b376f304e421ULL;
};

template<class ContainerAllocator>
struct DataType< ::sophon_robot::Frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sophon_robot/Frame";
  }

  static const char* value(const ::sophon_robot::Frame_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sophon_robot::Frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 frame_id\n"
"sensor_msgs/CompressedImage img\n"
"Bboxes bboxes\n"
"================================================================================\n"
"MSG: sensor_msgs/CompressedImage\n"
"# This message contains a compressed image\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"\n"
"string format        # Specifies the format of the data\n"
"                     #   Acceptable values:\n"
"                     #     jpeg, png\n"
"uint8[] data         # Compressed image buffer\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sophon_robot/Bboxes\n"
"uint32 frame_id\n"
"uint32 num_object\n"
"Bbox[] bboxes\n"
"\n"
"================================================================================\n"
"MSG: sophon_robot/Bbox\n"
"uint32 frame_id\n"
"uint32 object_id \n"
"int32  track_id\n"
"string object_name\n"
"float32  left_top_x\n"
"float32  left_top_y\n"
"float32  width\n"
"float32  height\n"
"float32  conf\n"
;
  }

  static const char* value(const ::sophon_robot::Frame_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sophon_robot::Frame_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.img);
      stream.next(m.bboxes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Frame_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sophon_robot::Frame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sophon_robot::Frame_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frame_id);
    s << indent << "img: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.img);
    s << indent << "bboxes: ";
    s << std::endl;
    Printer< ::sophon_robot::Bboxes_<ContainerAllocator> >::stream(s, indent + "  ", v.bboxes);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOPHON_ROBOT_MESSAGE_FRAME_H
